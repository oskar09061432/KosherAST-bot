
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import pandas as pd
from datetime import datetime
import os

API_TOKEN = "PASTE_YOUR_BOT_TOKEN_HERE"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üì¶ –ö–æ—à–µ—Ä–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"))
keyboard.add(KeyboardButton("‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"))
keyboard.add(KeyboardButton("üìû –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"))
keyboard.add(KeyboardButton("üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"))
keyboard.add(KeyboardButton("üåê –°–∞–π—Ç AST"))

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
PRICE_PATH = "c 1.02 –ø—Ä–∞–π—Å –ª–∏—Å—Ç 35.xlsx"
LOG_PATH = "bot_logs.xlsx"
SUGGESTIONS_PATH = "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.xlsx"

def log_user(user_id, username, full_name, action):
    time = datetime.now().strftime("%Y-%m-%d %H:%M")
    df = pd.DataFrame([[time, user_id, username, full_name, action]],
                      columns=["–í—Ä–µ–º—è", "ID", "Username", "–ò–º—è", "–î–µ–π—Å—Ç–≤–∏–µ"])
    if os.path.exists(LOG_PATH):
        df.to_excel(LOG_PATH, index=False, header=False, startrow=len(pd.read_excel(LOG_PATH)))
    else:
        df.to_excel(LOG_PATH, index=False)

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    log_user(message.from_user.id, message.from_user.username, message.from_user.full_name, "start")
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ—à–µ—Ä–Ω—ã–π –∞–ª–∫–æ–≥–æ–ª—å –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.
"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üì¶ –ö–æ—à–µ—Ä–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç")
async def send_price(message: types.Message):
    log_user(message.from_user.id, message.from_user.username, message.from_user.full_name, "–ø—Ä–∞–π—Å-–ª–∏—Å—Ç")
    await message.answer_document(types.InputFile(PRICE_PATH))

@dp.message_handler(lambda message: message.text == "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
async def send_answers(message: types.Message):
    log_user(message.from_user.id, message.from_user.username, message.from_user.full_name, "–≤–æ–ø—Ä–æ—Å—ã")
    text = (
        "üü¶ –í –∫–∞–∫–∏—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?
"
        "–î–æ—Å—Ç–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤ –ú–æ—Å–∫–≤–µ –∏ –≤ –ú–û.

"
        "üü¶ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?
"
        "–î–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è.

"
        "üü¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞?
"
        "–ó–∞–∫–∞–∑—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–æ 16:00. –¢–∞–∫–∂–µ –¥–æ—Å—Ç–∞–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –¥–µ–Ω—å, –∫—Ä–æ–º–µ —Å—É–±–±–æ—Ç—ã –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è. "
        "–í –¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç –≤–æ–¥–∏—Ç–µ–ª—å –∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –æ –ø—Ä–∏–º–µ—Ä–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤—ã –º–æ–∂–µ—Ç–µ —Å –Ω–∏–º –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, –µ—Å–ª–∏ –≤–∞–º –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç –≤—Ä–µ–º—è).

"
        "üü¶ –ö–∞–∫ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å?
"
        "–û–ø–ª–∞—Ç–∞ —Å—Ç—Ä–æ–≥–æ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –≤ —Ä—É–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—é (–ª—É—á—à–µ –±–µ–∑ —Å–¥–∞—á–∏)."
    )
    await message.answer(text)

@dp.message_handler(lambda message: message.text == "üìû –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def contact(message: types.Message):
    log_user(message.from_user.id, message.from_user.username, message.from_user.full_name, "–∫–æ–Ω—Ç–∞–∫—Ç")
    await message.answer("üìû –û—Å–∫–∞—Ä
–¢–µ–ª: 8-925-178-77-09
Telegram: @oskar_0906")

@dp.message_handler(lambda message: message.text == "üåê –°–∞–π—Ç AST")
async def site(message: types.Message):
    log_user(message.from_user.id, message.from_user.username, message.from_user.full_name, "—Å–∞–π—Ç AST")
    await message.answer("–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏:
https://www.ast-inter.ru/")

@dp.message_handler(lambda message: message.text == "üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
async def offer_request(message: types.Message):
    log_user(message.from_user.id, message.from_user.username, message.from_user.full_name, "–≤–∫–ª–∞–¥–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    await message.answer("–ü–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —á–µ–≥–æ –≤—ã –µ—â–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å –≤ –±–æ—Ç–µ, –∫–∞–∫–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –¥–æ–±–∞–≤–∏—Ç—å:")

@dp.message_handler()
async def suggestions(message: types.Message):
    user = message.from_user
    log_user(user.id, user.username, user.full_name, f"–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {message.text}")
    df = pd.DataFrame([[datetime.now().strftime("%Y-%m-%d %H:%M"), user.id, user.username, user.full_name, message.text]],
                      columns=["–í—Ä–µ–º—è", "ID", "Username", "–ò–º—è", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"])
    if os.path.exists(SUGGESTIONS_PATH):
        df.to_excel(SUGGESTIONS_PATH, index=False, header=False, startrow=len(pd.read_excel(SUGGESTIONS_PATH)))
    else:
        df.to_excel(SUGGESTIONS_PATH, index=False)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
